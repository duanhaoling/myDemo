apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'org.greenrobot.greendao'

buildscript {
    //配置gradle插件的仓库
    repositories {
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'io.fabric.tools:gradle:1.21.6'
        //添加apt插件,使用注解 ，Dagger2
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
    }
}
//配置依赖库的仓库
repositories {
    jcenter()
    maven { url "https://jitpack.io" }
    maven { url 'https://maven.fabric.io/public' }
}

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

//    useLibrary 'org.apache.http.legacy'

    defaultConfig {
        applicationId "com.example.mydemo"
        minSdkVersion 16
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"

        multiDexEnabled true            //开启multiDex

        ndk {
            abiFilters 'armeabi-v7a', 'x86'    //只支持armeabi-v7a和x86，减小安装包体积
        }
    }
    dexOptions {
        jumboMode = true
        // here heap size give 4g i got this thing from https://groups.google.com/forum/#!topic/adt-dev/P_TLBTyFWVY
        javaMaxHeapSize "4g"
    }

    signingConfigs {
        release {
            try {
                storeFile file("./keystore/release.keystore")
                storePassword "123456"
                keyAlias "moon"
                keyPassword "111111"
            } catch (ex) {
                throw new InvalidUserDataException(ex.toString())
            }
        }
        debug {
            storeFile file("./keystore/debug.keystore")
            storePassword "123456"
            keyAlias "moon"
            keyPassword "111111"
        }
    }
    buildTypes {
        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            manifestPlaceholders = [fabric_apikey: "e6c6ff9086549350c2f37ca72a48653b1e08e79c"]

            signingConfig signingConfigs.release
            shrinkResources true    //移除无用的资源文件
            zipAlignEnabled true    //Zipalign优化
            minifyEnabled true      //混淆编译
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            debuggable false
            jniDebuggable false
        }

        debug {
            //log相关
            buildConfigField "boolean", "LOG_DEBUG", "true"

            manifestPlaceholders = [fabric_apikey: "e6c6ff9086549350c2f37ca72a48653b1e08e79c"]

            signingConfig signingConfigs.debug
            debuggable true
            jniDebuggable true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

//    schemaVersion： 数据库schema版本，也可以理解为数据库版本号
//    daoPackage：设置生成的DaoMaster、DaoSession、Dao包名
//    targetGenDir：设置DaoMaster、DaoSession、Dao目录
//    targetGenDirTest：设置生成单元测试目录
//    generateTests：设置自动生成单元测试用例
    greendao {
        schemaVersion 1
        daoPackage 'com.example.mydemo.greendaotdemo'
        targetGenDir 'src/main/java'
    }

    //使用DataBinding
    dataBinding {
        enabled = true
    }
    //禁止 Gradle 检查png的合法性
    aaptOptions {
        cruncherEnabled false
    }

    //use to test flavors support
    productFlavors {
        kuan {}
        xiaomi {}
//        qh360 {}
//        baidu {}
//        wandoujia {}
    }

    productFlavors.all {
        flavor -> flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
    }
//    所谓ProductFlavors其实就是可定义的产品特性，
//    配合 manifest merger 使用的时候就可以达成在一次编译过程中产生多个具有自己特性配置的版本。
//     上面这个配置的作用就是，为每个渠道包产生不同的 UMENG_CHANNEL_VALUE 的值。
}



dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    //私有库
    //    compile project(':androidlib')
    debugCompile project(path: ':androidlib', configuration: 'debug')
    releaseCompile project(path: ':androidlib', configuration: 'release')
    //fabric
    compile('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true;
    }
    compile('com.crashlytics.sdk.android:crashlytics-ndk:1.1.6@aar') {
        transitive = true;
    }
    compile 'de.hdodenhof:circleimageview:2.0.0'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.android.support:multidex:1.0.1'
    compile 'com.google.auto.service:auto-service:1.0-rc3'
    testCompile 'junit:junit:4.12'
}
//fabric
crashlytics {
    enableNdk true
    androidNdkOut 'src/main/obj'
    androidNdkLibsOut 'src/main/libs'
}


